language: cpp
os: linux

stages:
  - check
  - build

before_install:
  - wget --no-check-certificate https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
  - sudo dpkg -i cvmfs-release-latest_all.deb
  - sudo apt-get update
  - sudo apt-get install cvmfs cvmfs-config-default
  - rm -f cvmfs-release-latest_all.deb
  - wget --no-check-certificate https://lcd-data.web.cern.ch/lcd-data/CernVM/default.local
  - sudo mkdir -p /etc/cvmfs
  - sudo mv default.local /etc/cvmfs/default.local
  - sudo /etc/init.d/autofs stop
  - sudo cvmfs_config setup
  - sudo mkdir -p /cvmfs/sft.cern.ch
  - sudo umount /cvmfs/sft.cern.ch || /bin/true
  - sudo cvmfs_config killall
  - sudo mount -t cvmfs sft.cern.ch /cvmfs/sft.cern.ch
  - echo "Mounting completed"
  - ls /cvmfs/sft.cern.ch
script:
  - docker run -ti --name CI_container -v ${PWD}:/src -w /src -v"/cvmfs:/cvmfs:ro" -d gitlab-registry.cern.ch/acts/machines/$OS /bin/bash
  - docker exec -ti CI_container /bin/bash -c "source CI/setup_lcg$LCG.sh && mkdir build && cd build && cmake .. -DACTS_BUILD_EXAMPLES=on -DACTS_BUILD_TESTS=on -DACTS_BUILD_INTEGRATION_TESTS=on -DACTS_BUILD_DIGITIZATION_PLUGIN=on -DACTS_BUILD_IDENTIFICATION_PLUGIN=on -DACTS_BUILD_JSON_PLUGIN=on -DACTS_BUILD_LEGACY=on -DACTS_BUILD_DD4HEP_PLUGIN=on -DACTS_BUILD_TGEO_PLUGIN=on && cmake --build . -- -j$(nproc) && cmake --build . -- test"

env:

services:
  - docker

jobs:
  include:
    - os: osx
      osx_image: xcode10.2
      stage: build
      before_install:
        - brew install eigen
      script:
        - mkdir build && cd build
        - cmake .. -DCMAKE_CXX_FLAGS="-std=c++17" -DACTS_BUILD_EXAMPLES=on -DACTS_BUILD_TESTS=on -DACTS_BUILD_INTEGRATION_TESTS=on -DACTS_BUILD_DIGITIZATION_PLUGIN=on -DACTS_BUILD_IDENTIFICATION_PLUGIN=on -DACTS_BUILD_JSON_PLUGIN=on -DACTS_BUILD_LEGACY=on
        - cmake --build . -- -j$(nproc)
        - cmake --build . -- test

    - name: license check
      before_install: ""
      stage: check
      service: []
      sudo: false
      language: python
      python: "3.6"
      install: pip install -r CI/requirements.txt
      script:
        - CI/check_license.py .

    - name: include guards
      before_install: ""
      stage: check
      service: []
      sudo: false
      language: python
      python: "3.6"
      install: pip install -r CI/requirements.txt
      script:
        - CI/check_include_guards.py . --fail-global

    - name: clang-format
      before_install: ""
      stage: check
      script:
        - docker run -ti --name CI_container -v ${PWD}:/src -w /src -d gitlab-registry.cern.ch/acts/machines/check_llvm8 /bin/bash
        - docker exec -ti CI_container /bin/bash -c "CI/check_format ."

    - env: OS=cc7 LCG=94
      stage: build

    - env: OS=cc7 LCG=95
      stage: build

    - env: OS=slc6 LCG=94
      stage: build

    - env: OS=slc6 LCG=95
      stage: build




notifications:
  email:
    on_success: never
    on_failure: change
