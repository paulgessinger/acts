language: cpp
os: linux

stages:
  - check
  - build

before_install:
  - wget --no-check-certificate https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
  - sudo dpkg -i cvmfs-release-latest_all.deb
  - sudo apt-get update
  - sudo apt-get install cvmfs cvmfs-config-default
  - rm -f cvmfs-release-latest_all.deb
  - wget --no-check-certificate https://lcd-data.web.cern.ch/lcd-data/CernVM/default.local
  - sudo mkdir -p /etc/cvmfs
  - sudo mv default.local /etc/cvmfs/default.local
  - sudo /etc/init.d/autofs stop
  - sudo cvmfs_config setup
  - sudo mkdir -p /cvmfs/sft.cern.ch
  - sudo umount /cvmfs/sft.cern.ch || /bin/true
  - sudo cvmfs_config killall
  - sudo mount -t cvmfs sft.cern.ch /cvmfs/sft.cern.ch
  - echo "Mounting completed"
  - ls /cvmfs/sft.cern.ch

before_script:
  - docker run -ti --name CI_container -v "${PWD}:/src:rw" -w /src -v"/cvmfs:/cvmfs:ro" -v"$HOME/.ccache:/ccache:rw" -d gitlab-registry.cern.ch/acts/machines/$OS /bin/bash

script:
  - docker exec -ti CI_container /bin/bash -c "source CI/setup_lcg$LCG.sh && mkdir build && cd build && export CCACHE_DIR=/ccache && CXX=\"ccache $CXX\" cmake .. -GNinja -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS=\"-Werror\" -DACTS_BUILD_EXAMPLES=on -DACTS_BUILD_TESTS=on -DACTS_BUILD_INTEGRATION_TESTS=on -DACTS_BUILD_DIGITIZATION_PLUGIN=on -DACTS_BUILD_IDENTIFICATION_PLUGIN=on -DACTS_BUILD_JSON_PLUGIN=on -DACTS_BUILD_LEGACY=on -DACTS_BUILD_DD4HEP_PLUGIN=on -DACTS_BUILD_TGEO_PLUGIN=on && cmake --build . && cmake --build . -- test"

env:
  global:
    - BUILD_TYPE: Release

services:
  - docker

jobs:
  include:
    - name: license check
      before_install: ""
      stage: check
      services: []
      sudo: false
      language: python
      python: "3.6"
      install: pip install -r CI/requirements.txt
      before_script: []
      script:
        - CI/check_license.py .

    - name: include guards
      before_install: ""
      stage: check
      services: []
      sudo: false
      language: python
      python: "3.6"
      install: pip install -r CI/requirements.txt
      before_script: []
      script:
        - CI/check_include_guards.py . --fail-global

    - name: clang-format
      before_install: ""
      install:
        - sudo apt-get update
        - sudo apt-get install -y clang-format-8
      stage: check
      services: []
      dist: bionic
      before_script: []
      script:
        - PATH=/usr/lib/llvm-8/bin/:$PATH CI/check_format .

    - os: osx
      osx_image: xcode10.2
      stage: build
      services: []
      cache: &ccache
        directories:
        - $HOME/.ccache
      before_install:
        - brew install eigen
      before_script: []
      install:
        - brew install ccache ninja
        - export PATH="/usr/local/opt/ccache/libexec:$PATH"
      script:
        - mkdir build && cd build
        - CXX="ccache $CXX" cmake .. -GNinja -DCMAKE_CXX_FLAGS="-std=c++17 -Werror" -DACTS_BUILD_EXAMPLES=on -DACTS_BUILD_TESTS=on -DACTS_BUILD_INTEGRATION_TESTS=on -DACTS_BUILD_DIGITIZATION_PLUGIN=on -DACTS_BUILD_IDENTIFICATION_PLUGIN=on -DACTS_BUILD_JSON_PLUGIN=on -DACTS_BUILD_LEGACY=on
        - cmake --build .
        - cmake --build . -- test

    - env: OS=cc7 LCG=94
      stage: build
      cache:
        <<: *ccache

    - env: OS=cc7 LCG=95
      stage: build
      cache:
        <<: *ccache

    - env: OS=slc6 LCG=94 BUILD_TYPE=Debug
      stage: build
      after_script:
        - echo "Collecting coverage"
        #- cd build
        #- env -i bash ../CI/coverage_environment.sh "../CI/test_coverage --gcov $(which gcov)"
        - docker exec -ti CI_container /bin/bash -c "cd build && ../CI/coverage_environment.sh \"../CI/test_coverage --gcov $(which gcov)\"""
      cache:
        <<: *ccache

    - env: OS=slc6 LCG=95
      stage: build
      cache:
        <<: *ccache




notifications:
  email:
    on_success: never
    on_failure: change
