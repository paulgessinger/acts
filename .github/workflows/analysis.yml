name: Analysis

on:
  push:
    # branches:
      # - main
  pull_request:
    branches:
      - main
      - 'release/**'

env:
  CTEST_OUTPUT_ON_FAILURE: 1
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_MAXSIZE: 10G
  CCACHE_KEY_SUFFIX: r1

# NOTE this only builds core unittests to reduce the output size. if we
#      found a way to have Github actions not fail regularly with this job
#      all unit tests should be reactivated.
jobs:
  build_debug:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004:v22
    steps:
      - uses: actions/checkout@v3

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/ccache
          key: ${{ runner.os  }}-ccache-linux_ubuntu_debug_${{ env.CCACHE_KEY_SUFFIX }}

      - name: Configure
        run: >
          cmake -B build -S .
          -GNinja
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_CXX_FLAGS="-Werror -gz -g1"
          -DACTS_BUILD_UNITTESTS=on
          -DACTS_LOG_FAILURE_THRESHOLD=WARNING
      - name: Build
        run: cmake --build build --
      - name: Unit tests
        run: cmake --build build -- test
      - name: Remove .o files
        run: >
          du -sh build
          && find build -name *.o -delete
          && du -sh build
      - name: Coverage
        run: >
          pip3 install gcovr==5.0
          && cd build
          && /usr/bin/python3 ../CI/test_coverage
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          file: ./build/coverage/cov.xml

  clang-tidy:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004:v15
    steps:
      - uses: actions/checkout@v2
      - name: Install clang-tidy
        run: >
          apt-get update
          && apt-get install -y clang-10 clang-tidy-10 g++-8 libstdc++-8-dev
          && ln -s /usr/bin/clang++-10 /usr/bin/clang++
          && ln -s /usr/bin/clang-10 /usr/bin/clang
          && ln -s /usr/bin/clang-tidy-10 /usr/bin/clang-tidy
          && mkdir -p /opt/lib/gcc/x86_64-linux-gnu
          && ln -s /usr/lib/gcc/x86_64-linux-gnu/8/ /opt/lib/gcc/x86_64-linux-gnu/ 
          && clang++ --gcc-toolchain=/opt -v
      - name: Configure
        run: >
          cmake -B build -S .
          -GNinja
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS="-Werror --gcc-toolchain=/opt"
          -DACTS_BUILD_EVERYTHING=on
          -DACTS_RUN_CLANG_TIDY=on
          && cmake -B build -S .
          -DACTS_BUILD_UNITTESTS=OFF
          -DACTS_BUILD_INTEGRATIONTESTS=OFF
          -DACTS_BUILD_BENCHMARKS=OFF
      - name: Build
        run: cmake --build build --


  build_performance:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004:v22
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pip3 install git+https://github.com/paulgessinger/cmakeperf.git@ece8fc8
      - name: Configure
        run: >
          cmake -B build -S .
          -GNinja
          -DCMAKE_BUILD_TYPE=RelWithDebInfo
          -DCMAKE_CXX_FLAGS="-Werror"
          -DACTS_BUILD_EVERYTHING=ON
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: Measure
        run: cmakeperf collect build/compile_commands.json -o perf.csv
      - name: Results
        run: cmakeperf print perf.csv
      - uses: actions/upload-artifact@v2
        with:
          name: cmakeperf
          path: perf.csv
  
  metric_tracking:
    runs-on: ubuntu-latest
    needs: build_performance
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pip3 install git+https://github.com/paulgessinger/headwind.git@eeeaa80
      - uses: actions/download-artifact@v2
        with:
          name: cmakeperf
      - name: Run collection
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.METRIC_DEPLOY_SSH_KEY }}"
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git clone git@github.com:acts-project/metrics.git
          hdw collect CI/headwind.yml --commit $(git log --pretty=format:'%H' -1)
          cd metrics
          git add -A
          git commit -m"update metrics"
          git push

