name: SonarCloud
on:
  workflow_run:
    workflows: [Analysis]
    types: [completed]

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0
      - name: 'Download code coverage'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "coverage-build"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/coverage-build.zip`, Buffer.from(download.data));

      - name: 'Unzip code coverage'
        run: unzip coverage-build.zip -d build

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Put the name of your token here
        run: |
          sonar-scanner \
            --define sonar.cfamily.compile-commands="build/compile_commands.json" \
            --define sonar.coverageReportPaths=build/coverage/cov.xml \
            --define sonar.projectVersion=$(cat next_version.txt) \
            --define sonar.scm.revision=${{ github.event.workflow_run.head_sha }} \
            --define sonar.pullrequest.key=${{ github.event.workflow_run.pull_requests[0].number }} \
            --define sonar.pullrequest.branch=${{ github.event.workflow_run.pull_requests[0].head.ref }} \
            --define sonar.pullrequest.base=${{ github.event.workflow_run.pull_requests[0].base.ref }}
