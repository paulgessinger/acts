name: SonarCloud
on:
  workflow_run:
    workflows: [Analysis]
    types: [completed]

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Dump job context
        env:
          PAYLOAD: ${{ toJson(github.event.workflow_run) }}
        run: echo "${PAYLOAD}"

      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: 'Download artifact'
        uses: actions/github-script@v7
        id: dl-af
        with:
          script: |
            console.log(`Getting artifacts for workflow run id: ${context.payload.workflow_run.id}`);
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            for (artifact of allArtifacts.data.artifacts) {
              console.log(`Artifact #${artifact.id} ${artifact.name}`);
              let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              let fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}.zip`, Buffer.from(download.data));
            }
            return true;

      - name: Unzip artifacts
        run: |
          ls -al
          unzip coverage-build.zip -d build
          unzip PR_NUMBER.zip
          ls -al
          ls -al build


      # - name: Download PR workflow artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     run-id: ${{ github.event.workflow_run.id }}
          # name: PR_NUMBER

      # - name: Download PR number artifact
      #   if: github.event.workflow_run.event == 'pull_request'
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     # workflow: Analysis
      #     run_id: ${{ github.event.workflow_run.id }}
      #     name: PR_NUMBER

      - name: Read PR_NUMBER.txt
        if: github.event.workflow_run.event == 'pull_request'
        id: pr_number
        uses: juliangruber/read-file-action@v1
        with:
          path: ./PR_NUMBER.txt

      - name: Request GitHub API for PR data
        if: github.event.workflow_run.event == 'pull_request'
        uses: octokit/request-action@v2.x
        id: get_pr_data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: GET /repos/{full_name}/pulls/{number}
          number: ${{ steps.pr_number.outputs.content }}
          full_name: ${{ github.event.repository.full_name }}

      - name: Get upcoming version from milestones
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: acts-project/acts
        run: |
          CI/get_next_milestone.py | tee next_version.txt

      # - uses: actions/checkout@v3
      #   with:
      #       repository: ${{ github.event.workflow_run.head_repository.full_name }}
      #       ref: ${{ github.event.workflow_run.head_branch }}
      #       fetch-depth: 0

      - name: Checkout base branch
        if: github.event.workflow_run.event == 'pull_request'
        run: |
          git remote add upstream ${{ github.event.repository.clone_url }}
          git fetch upstream
          git checkout -B ${{ fromJson(steps.get_pr_data.outputs.data).base.ref }} upstream/${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}
          git checkout ${{ github.event.workflow_run.head_branch }}
          git clean -ffdx && git reset --hard HEAD

      # - uses: actions/checkout@v4
      #   with:
      #     repository: ${{ github.event.workflow_run.head_repository.full_name }}
      #     ref: ${{ github.event.workflow_run.head_branch }}
      #     fetch-depth: 0
      # - name: 'Download code coverage'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
      #          owner: context.repo.owner,
      #          repo: context.repo.repo,
      #          run_id: context.payload.workflow_run.id,
      #       });
      #       let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
      #         return artifact.name == "coverage-build"
      #       })[0];
      #       let download = await github.rest.actions.downloadArtifact({
      #          owner: context.repo.owner,
      #          repo: context.repo.repo,
      #          artifact_id: matchArtifact.id,
      #          archive_format: 'zip',
      #       });
      #       let fs = require('fs');
      #       fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/coverage-build.zip`, Buffer.from(download.data));
      #
      # - name: 'Unzip code coverage'
      #   run: unzip coverage-build.zip -d build
      #

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Put the name of your token here
        run: |
          sonar-scanner \
            --define sonar.cfamily.compile-commands="build/compile_commands.json" \
            --define sonar.coverageReportPaths=build/coverage/cov.xml \
            --define sonar.projectVersion=$(cat next_version.txt) \
            --define sonar.scm.revision=${{ github.event.workflow_run.head_sha }} \
            --define sonar.pullrequest.key=${{ github.event.workflow_run.pull_requests[0].number }} \
            --define sonar.pullrequest.branch=${{ github.event.workflow_run.pull_requests[0].head.ref }} \
            --define sonar.pullrequest.base=${{ github.event.workflow_run.pull_requests[0].base.ref }}
