finding_plots = expand("trackeff_vs_{q}", q=["eta", "pT", "phi"])\
            + ["nHoles_vs_eta", "nMeasurements_vs_eta", "nOutliers_vs_eta"]

fitting_plots = expand("reswidth_{q}_vs_eta", q=["d0", "z0", "qop", "phi", "theta", "t"])

samples = []\
  + expand("pg_mu_pt{pt}", pt=[1, 10, 100])\
  + ["mg_ttbar_test"]

rule all:
  input: 
    expand("reco/{sample}.edm4hep.root", sample=samples),
    expand("reco/plots/{sample}/{plot}.pdf", sample=samples, plot=finding_plots+fitting_plots),
    expand("reco/plots/{sample}/plots_{sample}.pdf", sample=samples),
    "gen/ttbar_test.tar.gz"

rule madgraph_init:
  output:
    "gen/mg_{sample}.tar.gz"
  input:
    "{sample}.toml"
  shell:
    "./with_env.sh colliderml -vv madgraph init {input} {output}"

rule particle_gun:
  output:
    "gen/pg_{particle, [a-z]+}_pt{pt,\\d+}.hepmc3.gz"
  params:
    events=10000
  threads: workflow.cores
  shell:
    "./with_env.sh ./gen_particle_gun.py -j {threads} --output {output} --type {wildcards.particle} --pt {wildcards.pt} --events {params.events}"

rule count_hepmc:
  input:
    "gen/{sample}.hepmc3.gz"
  output: 
    "gen/{sample}.hepmc3.gz.count"
  shell:
    "./with_env.sh python3 ./count_hepmc3.py {input} {output}"

rule sim:
  input:
    "gen/{sample}.hepmc3.gz",
    "gen/{sample}.hepmc3.gz.count",
  output: 
    "sim/{sample}.edm4hep.root"
  params:
    minkin=0.001
  threads: 1
  shell:
    "./with_env.sh python3 ./ddsim.py --input {input[0]} --output {output} --minimalKineticEnergy {params.minkin}"

rule digi:
  input:
    "sim/{sample}.edm4hep.root"
  output: 
    "digi/{sample}.edm4hep.root"
  threads: workflow.cores
  shell:
    "./with_env.sh python3 ./digitization.py {input} {output} --jobs {threads} --config config.toml"

rule reco:
  input:
    "digi/{sample}.edm4hep.root"
  output: 
    "reco/{sample}.edm4hep.root",
    "reco/performance_finding_ckf_{sample}.root",
    "reco/performance_fitting_ckf_{sample}.root"
  threads: workflow.cores
  shell:
    "./with_env.sh python3 ./reconstruction.py {input} {output[0]} --jobs {threads} --loglevel INFO --config config.toml"

rule reco_plots:
  input:
    "reco/performance_finding_ckf_{sample}.root",
    "reco/performance_fitting_ckf_{sample}.root"
  output: 
    [f"reco/plots/{{sample}}/{plot}.pdf" for plot in finding_plots+fitting_plots],
    "reco/plots/{sample}/plots_{sample}.pdf"
  params:
    finding_plots = ','.join(finding_plots),
    fitting_plots = ','.join(fitting_plots)
  shell:
    "./with_env.sh python3 ./plot_basic_diagnostics.py {input} reco/plots/{wildcards.sample} --finding-plots {params.finding_plots} --fitting-plots {params.fitting_plots} --label {wildcards.sample}"
